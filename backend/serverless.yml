service: webftp

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'demo'}
  region: ${env:region, 'eu-west-1'}
  memorySize: 128
  stackTags:
    ci: ${file(env/${self:service}.${self:provider.stage}.json):ci}
    UOCEnv: ${file(env/${self:service}.${self:provider.stage}.json):Env}
    Departament: ${file(env/${self:service}.${self:provider.stage}.json):CodiEnt}
    Programa: ${file(env/${self:service}.${self:provider.stage}.json):Lot}
    name: ${self:service}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: "*"
    #- Effect: 'Allow'
    #  Action:
    #    - sts:AssumeRole
    #  Resource: "*"
  apiGateway:
    shouldStartNameWithService: true

  environment:
    #ROLE: { "Fn::GetAtt" : [ "IamRoleLambdaExecution", "Arn" ] }
    #ORIGIN: https://${self:custom.frontBucket}.s3-${self:provider.region}.amazonaws.com
    ORIGIN: "*"

resources:
  Resources:    
    S3FrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access Website Bucket
    S3PublicDataOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access Public Data Bucket
    S3ProtectedDataOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access Protected Data Bucket
    ApiGatewayAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access API Gateway

    S3FrontCloudFront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - S3Front
        - ApiGatewayRestApi
        - S3ProtectedData
      Properties:
        DistributionConfig:
          Origins:
            - Id: S3Origin
              DomainName:
                Fn::Join:
                  - ''
                  - - ${self:custom.frontBucket}
                    - '.s3-${self:provider.region}.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - Ref: "S3FrontOriginAccessIdentity"
            - Id: ApiGatewayOrigin
              DomainName:
                Fn::Join:
                  - ''
                  - - Ref: "ApiGatewayRestApi"
                    - '.execute-api.'
                    - ${self:provider.region}
                    - '.amazonaws.com'
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only'
            - Id: S3ProtectedOrigin
              DomainName:
                Fn::Join:
                  - ''
                  - - ${self:custom.protectedDataBucket}
                    - '.s3-${self:provider.region}.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - Ref: "S3ProtectedDataOriginAccessIdentity"
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html

          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0

          CacheBehaviors:
            - TargetOriginId: ApiGatewayOrigin
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: true
                Cookies:
                  Forward: all
                Headers:
                  - Referer
                  - Authorization
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              PathPattern: ${self:custom.apiPath}/*
          DefaultRootObject: index.html
          Enabled: true
          #ViewerCertificate:
          #  AcmCertificateArn: ${self:custom.domainCertArn}
          #  MinimumProtocolVersion: TLSv1.1_2016
          #  SslSupportMethod: sni-only
          #Aliases:
          #  - ${self:custom.domain}

#    S3DNSName:
#      Type: AWS::Route53::RecordSetGroup
#      Properties:
#        HostedZoneId: Z000460910O4UQFOKDCIH
#        RecordSets:
#          - Name: ${self:custom.delegatedDomain}
#            Type: A
#            AliasTarget:
#                HostedZoneId: Z2FDTNDATAQYW2
#                DNSName:
#                  Fn::GetAtt: [ "S3FrontCloudFront", "DomainName" ]
#                EvaluateTargetHealth: false

    S3PublicCdnCloudFront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - S3PublicData
      Properties:
        DistributionConfig:
          Origins:
            - Id: S3PublicDataOrigin
              DomainName:
                Fn::Join:
                  - ''
                  - - ${self:custom.publicDataBucket}
                    - '.s3-${self:provider.region}.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - Ref: "S3PublicDataOriginAccessIdentity"
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            TargetOriginId: S3PublicDataOrigin
            ViewerProtocolPolicy: redirect-to-https
#            DefaultTTL: 3600
#            MaxTTL: 86400
#            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
          DefaultRootObject: index.html
          Enabled: true
          #ViewerCertificate:
          #  AcmCertificateArn: ${self:custom.publicCdnDomainCertArn}
          #  MinimumProtocolVersion: TLSv1.1_2016
          #  SslSupportMethod: sni-only
          #Aliases:
          #  - ${self:custom.publicCdnDomain}

    # S3PublicCdnDNSName:
    #   Type: AWS::Route53::RecordSetGroup
    #   Properties:
    #     HostedZoneId: Z000460910O4UQFOKDCIH
    #     RecordSets:
    #       - Name: ${self:custom.publicCdnDomain}
    #         Type: A
    #         AliasTarget:
    #             HostedZoneId: Z2FDTNDATAQYW2
    #             DNSName:
    #               Fn::GetAtt: [ "S3PublicCdnCloudFront", "DomainName" ]
    #             EvaluateTargetHealth: false

    S3ProtectedCdnCloudFront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - S3ProtectedData
      Properties:
        DistributionConfig:
          Origins:
            - Id: S3ProtectedDataOrigin
              DomainName:
                Fn::Join:
                  - ''
                  - - ${self:custom.protectedDataBucket}
                    - '.s3-${self:provider.region}.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - Ref: "S3ProtectedDataOriginAccessIdentity"
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /error/index.html

          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            TargetOriginId: S3ProtectedDataOrigin
            ViewerProtocolPolicy: redirect-to-https
#            DefaultTTL: 3600
#            MaxTTL: 86400
#            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            TrustedSigners:
              - 755686861862
          DefaultRootObject: index.html
          Enabled: true
          #ViewerCertificate:
          #  AcmCertificateArn: ${self:custom.protectedCdnDomainCertArn}
          #  MinimumProtocolVersion: TLSv1.1_2016
          #  SslSupportMethod: sni-only
          #Aliases:
          #  - ${self:custom.protectedCdnDomain}

#    S3ProtectedCdnDNSName:
#      Type: AWS::Route53::RecordSetGroup
#      Properties:
#        HostedZoneId: Z000460910O4UQFOKDCIH
#        RecordSets:
#          - Name: ${self:custom.protectedCdnDomain}
#            Type: A
#            AliasTarget:
#                HostedZoneId: Z2FDTNDATAQYW2
#                DNSName:
#                  Fn::GetAtt: [ "S3ProtectedCdnCloudFront", "DomainName" ]
#                EvaluateTargetHealth: false

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    S3PublicData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.publicDataBucket}
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - HEAD
              AllowedOrigins:
                #- https://${self:custom.frontBucket}.s3-website-${self:provider.region}.amazonaws.com
                - "*"
    S3PublicDataBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3PublicData
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ S3PublicDataOriginAccessIdentity , S3CanonicalUserId ]
              Action: "s3:GetObject"
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3PublicData"
                    },
                    "/*"
                  ]
                ]               
                # !Join
                #   - ""
                #   - - Fn::GetAtt: [S3PublicData, Arn]
                #     - "/*"            

    S3ProtectedData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.protectedDataBucket}
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - HEAD
              AllowedOrigins:
                #- https://${self:custom.frontBucket}.s3-website-${self:provider.region}.amazonaws.com
                - "*"
    S3ProtectedDataBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3ProtectedData
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ S3ProtectedDataOriginAccessIdentity , S3CanonicalUserId ]
              Action: "s3:GetObject"
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3ProtectedData"
                    },
                    "/*"
                  ]
                ]               
                # !Join
                #   - ""
                #   - - Fn::GetAtt: [S3ProtectedData, Arn]
                #     - "/*"

    S3Front:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontBucket}
        VersioningConfiguration:
          Status: Enabled

    FrontEndBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Front
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ S3FrontOriginAccessIdentity , S3CanonicalUserId ]
              Action: "s3:GetObject"
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Front"
                    },
                    "/*"
                  ]
                ]               
                # !Join
                #   - ""
                #   - - Fn::GetAtt: [S3Front, Arn]
                #     - "/*"
    
    S3Authz:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.authzBucket}
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - HEAD
              AllowedOrigins:
                - "*"   

functions:
  browse:
    handler: browsing/index.handler
    events:
      - http:
          path: ${self:custom.apiPath}/getfiles
          method: get
          cors: true
          authorizer:
            name: custom-auth
            resultTtlInSeconds: 1
            type: request 

  delete:
    handler: delete-keys/index.handler
    events:
      - http:
          path: ${self:custom.apiPath}/deletekeys
          method: post
          cors: true
          authorizer:
            name: custom-auth
            resultTtlInSeconds: 1
            type: request 
    timeout: 30

  upload:
    handler: form-signing-sdk/index.handler
    events:
      - http:
          path: ${self:custom.apiPath}/getuploadform
          method: get
          cors: true
          authorizer:
            name: custom-auth
            resultTtlInSeconds: 1
            type: request 

  download:
    handler: get-presigned-urls/index.handler
    events:
      - http:
          path: ${self:custom.apiPath}/getpresignedurls
          method: post
          cors: true
          authorizer:
            name: custom-auth
            resultTtlInSeconds: 1
            type: request 

  login:
    handler: login/app.handler
    events:
      - http:
          path: ${self:custom.apiPath}/{proxy+}
          method: any
          cors: true

    environment:
      API_PATH: ${self:custom.apiPath}
      STAGE: ${self:provider.stage}
      ISSUER: ${self:custom.issuer}
      BASEURL: ${self:custom.baseUrl}
      OID_CLIENTID: ${self:custom.oidClientId}
      OID_CLIENTSECRET: ${self:custom.oidClientSecret}
      OID_REDIRECTURI_PATH: ${self:custom.oidRedirectUriPath}
      G_OID_CLIENTID: ${self:custom.gOidClientId}
      G_OID_CLIENTSECRET: ${self:custom.gOidClientSecret}
      G_OID_REDIRECTURI_PATH: ${self:custom.gOidRedirectUriPath}
      COOKIES_SECRET: ${self:custom.cookiesSecret}
      COOKIES_TTL: ${self:custom.cookiesTtl}

  login-google:
    handler: login/app.handler
    events:
      - http:
          path: ${self:custom.apiPath}/google/{proxy+}
          method: any
          cors: true

    environment:
      API_PATH: ${self:custom.apiPath}/google
      STAGE: ${self:provider.stage}
      ISSUER: 'https://accounts.google.com'
      BASEURL: ${self:custom.baseUrl}
      OID_CLIENTID: ${self:custom.gOidClientId}
      OID_CLIENTSECRET: ${self:custom.gOidClientSecret}
      OID_REDIRECTURI_PATH: ${self:custom.gOidRedirectUriPath}
      COOKIES_SECRET: ${self:custom.cookiesSecret}
      COOKIES_TTL: ${self:custom.cookiesTtl}

  custom-auth:
    handler: custom-auth/index.handler
    environment:
      BUCKET: ${self:custom.authzBucket}
      FILE: permissions.csv
      ISSUER: ${self:custom.issuer}
      OID_PUBLIC_x509: ${self:custom.oidPublicX509}
      OID_CLIENTID: ${self:custom.oidClientId}
      G_OID_PUBLIC_x509: ${self:custom.gOidPublicX509}
      G_OID_CLIENTID: ${self:custom.gOidClientId}
      REGION: ${self:provider.region}

  getConfig:
    handler: get-config/index.handler
    events:
      - http:
          path: ${self:custom.apiPath}/getconfig
          method: get
          cors: true
    environment:
      PUBLIC_DATA_BUCKET: ${self:custom.publicDataBucket}
      PROTECTED_DATA_BUCKET: ${self:custom.protectedDataBucket}
      PUBLIC_CDN_DOMAIN: ${self:custom.publicCdnDomain}
      PROTECTED_CDN_DOMAIN: ${self:custom.protectedCdnDomain}

custom:
  frontBucket: ${self:service}-web-${self:provider.stage}
  authzBucket: ${self:service}-authz-${self:provider.stage}
  publicDataBucket: ${self:service}-files-${self:provider.stage}
  protectedDataBucket: ${self:service}-protected-files-${self:provider.stage}
  oidClientId: ${ssm:/${self:service}-config/${self:provider.stage}/oidClientId}
  #oidClientSecret: ${file(env/${self:service}.${self:provider.stage}.json):OID_CLIENTSECRET}
  oidClientSecret: ${ssm:/${self:service}-config/${self:provider.stage}/oidClientSecret}
  #oidPublicX509: ${file(env/${self:service}.${self:provider.stage}.json):OID_PUBLIC_x509}
  oidPublicX509: ${ssm:/${self:service}-config/${self:provider.stage}/oidPublicX509}
  oidRedirectUriPath: ${file(env/${self:service}.${self:provider.stage}.json):OID_REDIRECTURI_PATH}
  gOidClientId: ${ssm:/${self:service}-config/${self:provider.stage}/gOidClientId}
  gOidClientSecret: ${ssm:/${self:service}-config/${self:provider.stage}/gOidClientSecret}
  gOidPublicX509: ${ssm:/${self:service}-config/${self:provider.stage}/gOidPublicX509}
  gOidRedirectUriPath: ${file(env/${self:service}.${self:provider.stage}.json):G_OID_REDIRECTURI_PATH}
  issuer: ${file(env/${self:service}.${self:provider.stage}.json):ISSUER}
  #cookiesSecret: ${file(env/${self:service}.${self:provider.stage}.json):COOKIES_SECRET}
  cookiesSecret: ${ssm:/${self:service}-config/${self:provider.stage}/cookiesSecret}
  cookiesTtl: ${file(env/${self:service}.${self:provider.stage}.json):COOKIES_TTL}
  baseUrl: ${file(env/${self:service}.${self:provider.stage}.json):BASEURL}
  #awsKeyPairId: ${file(env/${self:service}.${self:provider.stage}.json):AWS_KEYPAIRID}
  awsKeyPairId: ${ssm:/${self:service}-config/${self:provider.stage}/awsKeyPairId}
  #awsPrivateKey: ${file(env/${self:service}.${self:provider.stage}.json):AWS_PRIVATEKEY}
  awsPrivateKey: ${ssm:/${self:service}-config/${self:provider.stage}/awsPrivateKey}
  awsSignedCookiesTtl: ${file(env/${self:service}.${self:provider.stage}.json):AWS_SIGNEDCOOKIES_TTL}
  apiPath: ${file(env/${self:service}.${self:provider.stage}.json):API_PATH, '/api'}
  domain: ${file(env/${self:service}.${self:provider.stage}.json):DOMAIN}
  domainCertArn: ${file(env/${self:service}.${self:provider.stage}.json):DOMAIN_CERT_ARN}
  publicCdnDomain: ${file(env/${self:service}.${self:provider.stage}.json):PUBLIC_CDN_DOMAIN}
  publicCdnDomainCertArn: ${file(env/${self:service}.${self:provider.stage}.json):PUBLIC_CDN_DOMAIN_CERT_ARN}
  protectedCdnDomain: ${file(env/${self:service}.${self:provider.stage}.json):PROTECTED_CDN_DOMAIN}
  protectedCdnDomainCertArn: ${file(env/${self:service}.${self:provider.stage}.json):PROTECTED_CDN_DOMAIN_CERT_ARN}

package:
  exclude:
    - node_modules/**
    - frontend/**
    - data/**